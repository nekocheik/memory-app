/// memory-app/src/components/RealTimeGame.tsx

import React from "react";
import { Box, Text, Button, VStack, HStack, Progress } from "@chakra-ui/react";
import useRealTimeGame from "../hooks/useRealTimeGame";
import useGameStore from "../store/gameStore";
import { MCard } from "./GameMode/Card";

interface RealTimeGameProps {
  knowledgeSetId: string;
  sessionId: string | null;
}

const RealTimeGame: React.FC<RealTimeGameProps> = ({
  knowledgeSetId,
  sessionId,
}) => {
  const { gameTimer, questionTimer, handleAnswer, handleNextQuestion } =
    useRealTimeGame(knowledgeSetId, sessionId || undefined);
  const { currentQuestion, feedback, showNextButton } = useGameStore();

  if (!currentQuestion) {
    return <Text>Waiting for the game to start...</Text>;
  }

  return (
    <VStack spacing={4} align="stretch">
      <Box>
        <Text fontWeight="bold">Game Time Remaining:</Text>
        <Text>
          {Math.floor(gameTimer / 60)}:
          {(gameTimer % 60).toString().padStart(2, "0")}
        </Text>
        <Progress value={(gameTimer / 300) * 100} />
      </Box>

      <MCard text={currentQuestion.question} />

      <Box>
        <Text fontWeight="bold">Time Remaining for this Question:</Text>
        <Text>{Math.ceil(questionTimer)} seconds</Text>
        <Progress value={(questionTimer / 10) * 100} colorScheme="green" />
      </Box>

      <HStack spacing={4} wrap="wrap" justify="center">
        {currentQuestion.answers.map((answer, index) => (
          <Button
            key={index}
            onClick={() => handleAnswer(answer.text)}
            colorScheme="blue"
            isDisabled={questionTimer === 0 || showNextButton}
          >
            {answer.text}
          </Button>
        ))}
      </HStack>

      {feedback && (
        <Box
          p={3}
          bg={feedback.includes("Correct") ? "green.100" : "red.100"}
          borderRadius="md"
        >
          <Text fontWeight="bold">{feedback}</Text>
        </Box>
      )}

      {showNextButton && (
        <Button onClick={handleNextQuestion} colorScheme="teal">
          Next Question
        </Button>
      )}
    </VStack>
  );
};

export default RealTimeGame;


---------
/// memory-app/src/hooks/useApi.ts

import axios from "axios";
import useUserStore from "../store";

// Créez une instance Axios avec la configuration de base
const api = axios.create({
  baseURL: process.env.REACT_APP_BACKEND_URI || "http://localhost:8000",
  timeout: 10000,
  headers: { "X-Custom-Header": "foobar" },
});

// Intercepteur de requête pour ajouter le token d'authentification
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("access_token");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    console.error("Erreur dans la requête:", error);
    return Promise.reject(error);
  }
);

// Intercepteur de réponse pour gérer les erreurs 401
api.interceptors.response.use(
  (response) => {
    console.log("Response received from:", response.config.url);
    console.log("Response data:", response.data);
    return response;
  },
  (error) => {
    console.error("Error in response:", error.response?.data || error.message);

    if (error.response && error.response.status === 401) {
      // Déconnexion de l'utilisateur
      useUserStore.getState().clearToken();
      localStorage.removeItem("access_token");

      // Redirection vers la page de connexion
      window.location.href = "/login";
    }

    return Promise.reject(error);
  }
);

// Définissez vos chemins API
const PATH = {
  signup: "/api/user/signup",
  login: "/api/user/login",
  knowledgeAdd: "/api/knowledge-set/add",
  activeSessions: "/api/game/sessions/active",
  knowledgeSets: "/api/knowledge-set",
  gamePerformance: "/api/game/performance", // Ajouté pour récupérer les performances
};

// Fonction pour définir le token dans le store et le localStorage
const setToken = (token: string) => {
  const userStore = useUserStore.getState(); // Utiliser le store directement
  userStore.setToken(token);
  localStorage.setItem("access_token", token);
  console.log("Token set:", token);
};

// Fonction d'inscription
const signup = async ({
  username,
  email,
  password,
}: {
  username: string;
  email: string;
  password: string;
}) => {
  try {
    const response = await api.post(PATH.signup, { username, email, password });
    const token = response?.data?.access_token;
    if (token) {
      setToken(token);
    }
    return response;
  } catch (error) {
    console.error("Failed to signup:", error);
    throw new Error("Failed to signup");
  }
};

// Fonction de connexion
const login = async ({
  username,
  password,
}: {
  username: string;
  password: string;
}) => {
  try {
    const response = await api.post(PATH.login, { username, password });
    const token = response?.data?.access_token;
    if (token) {
      setToken(token);
    }
    return response;
  } catch (error) {
    console.error("Failed to login:", error);
    throw new Error("Failed to login");
  }
};

// Autres fonctions API...
const addKnowledgeSet = async (KnowledgeSet: any) => {
  try {
    const response = await api.post(PATH.knowledgeAdd, {
      ...KnowledgeSet,
    });
    console.log("Knowledge set added:", response.data);
    return response.data;
  } catch (error) {
    console.error("Failed to add knowledge set:", error);
    throw error;
  }
};

const getUserKnowledgeSets = async () => {
  try {
    const response = await api.get(PATH.knowledgeSets);
    console.log("Fetched user knowledge sets:", response.data);
    return response.data;
  } catch (error) {
    console.error("Failed to fetch knowledge sets:", error);
    throw error;
  }
};

const getKnowledgeSetById = async (id: string) => {
  try {
    const response = await api.get(`${PATH.knowledgeSets}/${id}`);
    console.log("Fetched knowledge set by id:", response.data);
    return response.data;
  } catch (error) {
    console.error("Failed to fetch knowledge set:", error);
    throw error;
  }
};

const getQuestion = async (knowledgeId: string, id: string) => {
  try {
    const response = await api.get(
      `${PATH.knowledgeSets}/${knowledgeId}/${id}`
    );
    console.log("Fetched question:", response.data);
    return response.data;
  } catch (error) {
    console.error("Failed to fetch knowledge set:", error);
    throw error;
  }
};

const getActiveSessions = async () => {
  try {
    const response = await api.get(`${PATH.activeSessions}`);
    console.log("Fetched active sessions:", response.data);
    return response.data;
  } catch (error) {
    console.error("Failed to fetch active sessions:", error);
    throw error;
  }
};

const sendFeedback = async (cardId: string, feedback: string) => {
  try {
    const response = await api.post("/api/feedback", { cardId, feedback });
    return response.data;
  } catch (error) {
    console.error("Failed to send feedback:", error);
    throw error;
  }
};

// Nouvelle Fonction pour Récupérer les Données de Performance
const getGamePerformance = async (gameStateId: string) => {
  try {
    const response = await api.get(`${PATH.gamePerformance}/${gameStateId}`);
    console.log("Fetched game performance:", response.data);
    return response.data;
  } catch (error) {
    console.error("Failed to fetch game performance:", error);
    throw error;
  }
};

// Exportez vos fonctions via le hook useApi
export const useApi = () => {
  return {
    getKnowledgeSetById,
    getQuestion,
    addKnowledgeSet,
    signup,
    login,
    getActiveSessions,
    getUserKnowledgeSets,
    sendFeedback,
    getGamePerformance, // Exporté pour utiliser dans SummaryPage
  };
};


---------
/// memory-app/src/hooks/useNotification.ts

import { useEffect } from "react";

const useNotification = () => {
  useEffect(() => {
    if ("Notification" in window) {
      if (Notification.permission === "default") {
        Notification.requestPermission();
      }
    }
  }, []);

  const showNotification = (title: string, options?: NotificationOptions) => {
    if ("Notification" in window && Notification.permission === "granted") {
      new Notification(title, options);
    }
  };

  return { showNotification };
};

export default useNotification;


---------
/// memory-app/src/hooks/useQuery.ts

import { useLocation } from "react-router-dom";

export const useQuery = (): { Q: string } => {
  return new URLSearchParams(useLocation().search) as any;
};


---------
/// memory-app/src/hooks/useRealTimeGame.ts

import { useEffect } from "react";
import { io, Socket } from "socket.io-client";
import useGameStore from "../store/gameStore";
import useUserStore from "../store";
import useProgressStore from "../store/progressStore";
import { useApi } from "./useApi";

const useRealTimeGame = (knowledgeSetId: string, sessionId?: string) => {
  const {
    setCurrentQuestion,
    setFeedback,
    setTotalQuestions,
    setCurrentQuestionIndex,
    setGameStateId,
  } = useGameStore();
  const { setTotalQuestions: setProgressTotalQuestions } = useProgressStore();
  const { getGamePerformance } = useApi();
  const userStore = useUserStore();

  useEffect(() => {
    if (!userStore.token) return;

    const socket: Socket = io("http://localhost:8000", {
      auth: {
        token: userStore.token,
      },
    });

    socket.on("connect", () => {
      console.log("Connected to game socket");

      if (sessionId) {
        socket.emit("resumeGame", sessionId);
      } else {
        socket.emit("startGame", knowledgeSetId);
      }
    });

    socket.on("newQuestion", (data) => {
      console.log("Received newQuestion:", data);
      setCurrentQuestion(data);
      setCurrentQuestionIndex(data.currentQuestionIndex);
      setTotalQuestions(data.totalQuestions);
      setProgressTotalQuestions(data.totalQuestions);
      setGameStateId(data.gameStateId || null); // Assurez-vous que gameStateId est transmis
    });

    socket.on("feedback", (data) => {
      console.log("Received feedback:", data);
      setFeedback(data);
    });

    socket.on("gameOver", (data) => {
      console.log("Game over:", data);
      setFeedback(`Partie terminée ! Score: ${data.score}`);
      // Vous pouvez éventuellement stocker le gameStateId ici si nécessaire
    });

    socket.on("error", (errorMessage: string) => {
      console.error("Socket error:", errorMessage);
      setFeedback(`Erreur: ${errorMessage}`);
    });

    return () => {
      socket.disconnect();
    };
  }, [
    knowledgeSetId,
    sessionId,
    userStore.token,
    setCurrentQuestion,
    setFeedback,
    setTotalQuestions,
    setCurrentQuestionIndex,
    setGameStateId,
    setProgressTotalQuestions,
  ]);

  const { gameStateId } = useGameStore();

  return {
    gameTimer: 0, // Vous devriez implémenter le timer si nécessaire
    questionTimer: 0, // Vous devriez implémenter le timer si nécessaire
    handleAnswer: (answer: string) => {
      // Implémenter la logique d'envoi de réponse via socket
    },
    handleNextQuestion: () => {
      // Implémenter la logique de demande de la prochaine question via socket
    },
    gameStateId,
  };
};

export default useRealTimeGame;


---------
/// memory-app/src/pages/GameModes.tsx

import React, { useEffect, useState } from "react";
import { Text, Flex, Stack, Progress, Button, Box } from "@chakra-ui/react";
import { useParams, useNavigate, useLocation } from "react-router-dom";
import { Header } from "../components/Header";
import { Quiz } from "../components/Quiz";
import RealTimeGame from "../components/RealTimeGame";
import { useApi } from "../hooks/useApi";
import useGameStore from "../store/gameStore";
import { KnowledgeSet } from "../Types";
import useProgressStore from "../store/progressStore";

export const GameModes = () => {
  const { gameMode = "Quiz", id = "0" } = useParams<{
    gameMode: string;
    id: string;
  }>();
  const navigate = useNavigate();
  const location = useLocation();
  const sessionId = new URLSearchParams(location.search).get("sessionId");
  const {
    gameTimer,
    feedback,
    setGameTimer,
    setQuestions,
    currentQuestionIndex,
    totalQuestions,
    questions,
  } = useGameStore();
  const { getKnowledgeSetById } = useApi();
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [knowledgeSet, setKnowledgeSet] = useState<KnowledgeSet | null>(null);

  const { score, correctAnswers, badges, setTotalQuestions } =
    useProgressStore();

  useEffect(() => {
    const fetchData = async () => {
      try {
        console.log("Fetching knowledge set with id:", id);
        setIsLoading(true);
        const response = await getKnowledgeSetById(id);
        const data = response.data as KnowledgeSet;
        if (data && data.cards && data.cards.length > 0) {
          setKnowledgeSet(data);
          setQuestions(data.cards);
          setGameTimer(data.timeLimit || 300);
          setTotalQuestions(data.cards.length);
        } else {
          setError("No questions found in this knowledge set.");
        }
      } catch (err) {
        console.error("Failed to load knowledge set:", err);
        setError("Failed to load questions. Please try again.");
      } finally {
        setIsLoading(false);
      }
    };
    fetchData();
  }, [id, getKnowledgeSetById, setQuestions, setGameTimer, setTotalQuestions]);

  const handleEndGame = () => {
    navigate("/");
  };

  if (isLoading) return <Text>Loading...</Text>;
  if (error) return <Text color="red.500">{error}</Text>;

  return (
    <Stack spacing={4}>
      <Header hiddenButton={true} />
      <Flex justify="space-between" align="center">
        <Text fontSize="2xl" fontWeight="bold">
          {knowledgeSet?.name}
        </Text>
        <Text>
          Temps de jeu : {Math.floor(gameTimer / 60)}:
          {(gameTimer % 60).toString().padStart(2, "0")}
        </Text>
      </Flex>
      <Progress value={(gameTimer / (knowledgeSet?.timeLimit || 300)) * 100} />

      {gameMode === "Quiz" && (
        <Quiz knowledgeSetId={id} sessionId={sessionId} />
      )}
      {gameMode === "RealTime" && (
        <RealTimeGame knowledgeSetId={id} sessionId={sessionId} />
      )}

      <Text mt={4}>{feedback}</Text>

      <Flex justify="space-between">
        <Text>
          Question {currentQuestionIndex + 1} sur {totalQuestions}
        </Text>
        <Button onClick={handleEndGame} colorScheme="red">
          Terminer la partie
        </Button>
      </Flex>
      <Box>
        <Text>Score: {score}</Text>
        <Text>
          Progression: {correctAnswers} / {totalQuestions}
        </Text>
        <Text>Badges débloqués: {badges.join(", ")}</Text>
      </Box>
    </Stack>
  );
};

export default GameModes;


---------
/// memory-app/src/store/gameStore.ts

import { create } from "zustand";
import { MemoryCardType } from "../Types";

interface GameState {
  currentQuestion: MemoryCardType | null;
  questions: MemoryCardType[];
  currentQuestionIndex: number;
  gameTimer: number;
  questionTimer: number;
  feedback: string;
  showNextButton: boolean;
  correctAnswer: string | null; // Ajouté
  totalQuestions: number; // Ajouté
  gameStateId: string | null; // Ajouté
  setCurrentQuestion: (question: MemoryCardType) => void;
  setFeedback: (feedback: string) => void;
  setCorrectAnswer: (answer: string | null) => void; // Ajouté
  setCurrentQuestionIndex: (index: number) => void; // Ajouté
  setTotalQuestions: (total: number) => void; // Ajouté
  setGameStateId: (id: string | null) => void; // Ajouté
  setGameTimer: (timer: number | ((prev: number) => number)) => void;
  setQuestionTimer: (timer: number | ((prev: number) => number)) => void;
  setShowNextButton: (show: boolean) => void;
  nextQuestion: () => void;
  setQuestions: (questions: MemoryCardType[]) => void;
}

const useGameStore = create<GameState>((set) => ({
  currentQuestion: null,
  questions: [],
  currentQuestionIndex: 0,
  gameTimer: 300, // Temps total du jeu en secondes
  questionTimer: 10, // Temps par question en secondes
  feedback: "",
  showNextButton: false,
  correctAnswer: null, // Initialisé
  totalQuestions: 0, // Initialisé
  gameStateId: null, // Initialisé
  setCurrentQuestion: (question) => set({ currentQuestion: question }),
  setFeedback: (feedback) => set({ feedback }),
  setCorrectAnswer: (answer) => set({ correctAnswer: answer }),
  setCurrentQuestionIndex: (index) => set({ currentQuestionIndex: index }),
  setTotalQuestions: (total) => set({ totalQuestions: total }),
  setGameStateId: (id) => set({ gameStateId: id }),
  setGameTimer: (timer) =>
    set((state) => ({
      gameTimer: typeof timer === "function" ? timer(state.gameTimer) : timer,
    })),
  setQuestionTimer: (timer) =>
    set((state) => ({
      questionTimer:
        typeof timer === "function" ? timer(state.questionTimer) : timer,
    })),
  setShowNextButton: (show) => set({ showNextButton: show }),
  nextQuestion: () =>
    set((state) => {
      const nextIndex = state.currentQuestionIndex + 1;
      if (nextIndex < state.questions.length) {
        return {
          currentQuestionIndex: nextIndex,
          currentQuestion: state.questions[nextIndex],
          questionTimer: 10, // Réinitialiser le timer de la question
          showNextButton: false,
          correctAnswer: null, // Réinitialiser la bonne réponse
        };
      }
      return state; // Aucun changement si c'est la dernière question
    }),
  setQuestions: (questions) =>
    set({
      questions,
      currentQuestion: questions[0],
      totalQuestions: questions.length,
    }),
}));

export default useGameStore;

